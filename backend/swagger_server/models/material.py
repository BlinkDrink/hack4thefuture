# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.question import Question
from swagger_server.models.task import Task
from swagger_server.models.topic import Topic
from swagger_server import util


class Material(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, uuid: str = None, name: str = None, link: str = None, questions: List[Question] = None, tasks: List[Task] = None, topics: List[Topic] = None):  # noqa: E501
        """Material - a model defined in Swagger

        :param uuid: The uuid of this Material.  # noqa: E501
        :type uuid: str
        :param name: The name of this Material.  # noqa: E501
        :type name: str
        :param link: The link of this Material.  # noqa: E501
        :type link: str
        :param questions: The questions of this Material.  # noqa: E501
        :type questions: List[Question]
        :param tasks: The tasks of this Material.  # noqa: E501
        :type tasks: List[Task]
        :param topics: The topics of this Material.  # noqa: E501
        :type topics: List[Topic]
        """
        self.swagger_types = {
            'uuid': str,
            'name': str,
            'link': str,
            'questions': List[Question],
            'tasks': List[Task],
            'topics': List[Topic]
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'link': 'link',
            'questions': 'questions',
            'tasks': 'tasks',
            'topics': 'topics'
        }

        self._uuid = uuid
        self._name = name
        self._link = link
        self._questions = questions
        self._tasks = tasks
        self._topics = topics

    @classmethod
    def from_dict(cls, dikt) -> 'Material':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Material of this Material.  # noqa: E501
        :rtype: Material
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Material.


        :return: The uuid of this Material.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Material.


        :param uuid: The uuid of this Material.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def name(self) -> str:
        """Gets the name of this Material.


        :return: The name of this Material.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Material.


        :param name: The name of this Material.
        :type name: str
        """

        self._name = name

    @property
    def link(self) -> str:
        """Gets the link of this Material.


        :return: The link of this Material.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link: str):
        """Sets the link of this Material.


        :param link: The link of this Material.
        :type link: str
        """

        self._link = link

    @property
    def questions(self) -> List[Question]:
        """Gets the questions of this Material.


        :return: The questions of this Material.
        :rtype: List[Question]
        """
        return self._questions

    @questions.setter
    def questions(self, questions: List[Question]):
        """Sets the questions of this Material.


        :param questions: The questions of this Material.
        :type questions: List[Question]
        """

        self._questions = questions

    @property
    def tasks(self) -> List[Task]:
        """Gets the tasks of this Material.


        :return: The tasks of this Material.
        :rtype: List[Task]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks: List[Task]):
        """Sets the tasks of this Material.


        :param tasks: The tasks of this Material.
        :type tasks: List[Task]
        """

        self._tasks = tasks

    @property
    def topics(self) -> List[Topic]:
        """Gets the topics of this Material.


        :return: The topics of this Material.
        :rtype: List[Topic]
        """
        return self._topics

    @topics.setter
    def topics(self, topics: List[Topic]):
        """Sets the topics of this Material.


        :param topics: The topics of this Material.
        :type topics: List[Topic]
        """

        self._topics = topics
