# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user import User
from swagger_server.models.material import Material
from swagger_server import util


class Workspace(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, uuid: str = None, name: str = None, admin: User = None, students: List[User] = None, materials: List[Material] = None):  # noqa: E501
        """Workspace - a model defined in Swagger

        :param uuid: The uuid of this Workspace.  # noqa: E501
        :type uuid: str
        :param name: The name of this Workspace.  # noqa: E501
        :type name: str
        :param admin: The admin of this Workspace.  # noqa: E501
        :type admin: User
        :param students: The students of this Workspace.  # noqa: E501
        :type students: List[User]
        :param materials: The materials of this Workspace.  # noqa: E501
        :type materials: List[Material]
        """
        self.swagger_types = {
            'uuid': str,
            'name': str,
            'admin': User,
            'students': List[User],
            'materials': List[Material]
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'name': 'name',
            'admin': 'admin',
            'students': 'students',
            'materials': 'materials'
        }

        self._uuid = uuid
        self._name = name
        self._admin = admin
        self._students = students
        self._materials = materials

    @classmethod
    def from_dict(cls, dikt) -> 'Workspace':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Workspace of this Workspace.  # noqa: E501
        :rtype: Workspace
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Workspace.


        :return: The uuid of this Workspace.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Workspace.


        :param uuid: The uuid of this Workspace.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def name(self) -> str:
        """Gets the name of this Workspace.


        :return: The name of this Workspace.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Workspace.


        :param name: The name of this Workspace.
        :type name: str
        """

        self._name = name

    @property
    def admin(self) -> User:
        """Gets the admin of this Workspace.


        :return: The admin of this Workspace.
        :rtype: User
        """
        return self._admin

    @admin.setter
    def admin(self, admin: User):
        """Sets the admin of this Workspace.


        :param admin: The admin of this Workspace.
        :type admin: User
        """

        self._admin = admin

    @property
    def students(self) -> List[User]:
        """Gets the students of this Workspace.


        :return: The students of this Workspace.
        :rtype: List[User]
        """
        return self._students

    @students.setter
    def students(self, students: List[User]):
        """Sets the students of this Workspace.


        :param students: The students of this Workspace.
        :type students: List[User]
        """

        self._students = students

    @property
    def materials(self) -> List[Material]:
        """Gets the materials of this Workspace.


        :return: The materials of this Workspace.
        :rtype: List[Material]
        """
        return self._materials

    @materials.setter
    def materials(self, materials: List[Material]):
        """Sets the materials of this Workspace.


        :param materials: The materials of this Workspace.
        :type materials: List[Material]
        """

        self._materials = materials
